/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SeguimientoRouteImport } from './routes/seguimiento'
import { Route as RendimientoRouteImport } from './routes/rendimiento'
import { Route as OperacionesRouteImport } from './routes/operaciones'
import { Route as EstrategiaRouteImport } from './routes/estrategia'
import { Route as ComercialRouteImport } from './routes/comercial'
import { Route as IndexRouteImport } from './routes/index'

const SeguimientoRoute = SeguimientoRouteImport.update({
  id: '/seguimiento',
  path: '/seguimiento',
  getParentRoute: () => rootRouteImport,
} as any)
const RendimientoRoute = RendimientoRouteImport.update({
  id: '/rendimiento',
  path: '/rendimiento',
  getParentRoute: () => rootRouteImport,
} as any)
const OperacionesRoute = OperacionesRouteImport.update({
  id: '/operaciones',
  path: '/operaciones',
  getParentRoute: () => rootRouteImport,
} as any)
const EstrategiaRoute = EstrategiaRouteImport.update({
  id: '/estrategia',
  path: '/estrategia',
  getParentRoute: () => rootRouteImport,
} as any)
const ComercialRoute = ComercialRouteImport.update({
  id: '/comercial',
  path: '/comercial',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/comercial': typeof ComercialRoute
  '/estrategia': typeof EstrategiaRoute
  '/operaciones': typeof OperacionesRoute
  '/rendimiento': typeof RendimientoRoute
  '/seguimiento': typeof SeguimientoRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/comercial': typeof ComercialRoute
  '/estrategia': typeof EstrategiaRoute
  '/operaciones': typeof OperacionesRoute
  '/rendimiento': typeof RendimientoRoute
  '/seguimiento': typeof SeguimientoRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/comercial': typeof ComercialRoute
  '/estrategia': typeof EstrategiaRoute
  '/operaciones': typeof OperacionesRoute
  '/rendimiento': typeof RendimientoRoute
  '/seguimiento': typeof SeguimientoRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/comercial'
    | '/estrategia'
    | '/operaciones'
    | '/rendimiento'
    | '/seguimiento'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/comercial'
    | '/estrategia'
    | '/operaciones'
    | '/rendimiento'
    | '/seguimiento'
  id:
    | '__root__'
    | '/'
    | '/comercial'
    | '/estrategia'
    | '/operaciones'
    | '/rendimiento'
    | '/seguimiento'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ComercialRoute: typeof ComercialRoute
  EstrategiaRoute: typeof EstrategiaRoute
  OperacionesRoute: typeof OperacionesRoute
  RendimientoRoute: typeof RendimientoRoute
  SeguimientoRoute: typeof SeguimientoRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/seguimiento': {
      id: '/seguimiento'
      path: '/seguimiento'
      fullPath: '/seguimiento'
      preLoaderRoute: typeof SeguimientoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rendimiento': {
      id: '/rendimiento'
      path: '/rendimiento'
      fullPath: '/rendimiento'
      preLoaderRoute: typeof RendimientoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/operaciones': {
      id: '/operaciones'
      path: '/operaciones'
      fullPath: '/operaciones'
      preLoaderRoute: typeof OperacionesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/estrategia': {
      id: '/estrategia'
      path: '/estrategia'
      fullPath: '/estrategia'
      preLoaderRoute: typeof EstrategiaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/comercial': {
      id: '/comercial'
      path: '/comercial'
      fullPath: '/comercial'
      preLoaderRoute: typeof ComercialRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComercialRoute: ComercialRoute,
  EstrategiaRoute: EstrategiaRoute,
  OperacionesRoute: OperacionesRoute,
  RendimientoRoute: RendimientoRoute,
  SeguimientoRoute: SeguimientoRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
